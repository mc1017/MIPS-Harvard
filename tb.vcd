$date
	Thu Dec  2 20:29:12 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! register_v0 [31:0] $end
$var wire 32 " instr_address [31:0] $end
$var wire 32 # data_writedata [31:0] $end
$var wire 1 $ data_write $end
$var wire 1 % data_read $end
$var wire 32 & data_address [31:0] $end
$var wire 1 ' active $end
$var reg 1 ( clk $end
$var reg 1 ) clk_enable $end
$var reg 32 * data_readdate [31:0] $end
$var reg 32 + instr_readdata [31:0] $end
$var reg 1 , reset $end
$scope module dut $end
$var wire 1 ( clk $end
$var wire 1 ) clk_enable $end
$var wire 32 - data_readdata [31:0] $end
$var wire 32 . instr_address [31:0] $end
$var wire 32 / instr_readdata [31:0] $end
$var wire 32 0 instruction [31:0] $end
$var wire 1 , reset $end
$var wire 1 1 unsign $end
$var wire 32 2 target [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 4 regdst $end
$var wire 32 5 reg_write_data_2 [31:0] $end
$var wire 32 6 reg_write_data [31:0] $end
$var wire 5 7 reg_write_addr [4:0] $end
$var wire 32 8 reg_read_b [31:0] $end
$var wire 32 9 reg_read_a [31:0] $end
$var wire 32 : pc_out [31:0] $end
$var wire 32 ; pc_in [31:0] $end
$var wire 32 < pc4 [31:0] $end
$var wire 1 = memtoreg $end
$var wire 1 > lt $end
$var wire 32 ? lo [31:0] $end
$var wire 32 @ link_data [31:0] $end
$var wire 1 A jump $end
$var wire 32 B imm [31:0] $end
$var wire 32 C hi [31:0] $end
$var wire 1 D eq $end
$var wire 1 $ data_write $end
$var wire 1 % data_read $end
$var wire 32 E data_address [31:0] $end
$var wire 1 F branch $end
$var wire 1 G alusrc $end
$var wire 32 H aluout [31:0] $end
$var wire 2 I alucwire [1:0] $end
$var wire 4 J alucon [3:0] $end
$var reg 1 ' active $end
$var reg 5 K addrd [4:0] $end
$var reg 5 L addrs [4:0] $end
$var reg 5 M addrt [4:0] $end
$var reg 32 N alub [31:0] $end
$var reg 32 O data_writedata [31:0] $end
$var reg 6 P func [5:0] $end
$var reg 6 Q insop [5:0] $end
$var reg 32 R mem_addr_hold [31:0] $end
$var reg 5 S reg_write_addr_hold [4:0] $end
$var reg 32 T reg_write_data_1 [31:0] $end
$var reg 32 U register_v0 [31:0] $end
$scope module alu_block $end
$var wire 32 V alub [31:0] $end
$var wire 1 1 unsign $end
$var wire 32 W reg_read_a [31:0] $end
$var wire 4 X ALUcon [3:0] $end
$var reg 32 Y ALUoutput [31:0] $end
$var reg 1 D eq $end
$var reg 32 Z hi [31:0] $end
$var reg 32 [ lo [31:0] $end
$var reg 1 > lt $end
$var reg 64 \ multiplier [63:0] $end
$upscope $end
$scope module alucontrol_block $end
$var wire 6 ] func [5:0] $end
$var wire 6 ^ op [5:0] $end
$var wire 2 _ ALUop [1:0] $end
$var reg 4 ` ALUcon [3:0] $end
$upscope $end
$scope module control_block $end
$var wire 5 a branchfield [4:0] $end
$var wire 6 b func [5:0] $end
$var wire 6 c insop [5:0] $end
$var wire 1 3 regwrite $end
$var wire 1 4 regdst $end
$var wire 1 $ memwrite $end
$var wire 1 = memtoreg $end
$var wire 1 % memread $end
$var wire 1 A jump $end
$var wire 1 F branch $end
$var wire 1 G ALUsrc $end
$var wire 2 d ALUop [1:0] $end
$var reg 10 e controlsig [9:0] $end
$upscope $end
$scope module dac_block $end
$var wire 32 f address [31:0] $end
$var wire 32 g instruction [31:0] $end
$var reg 32 h address_out [31:0] $end
$upscope $end
$scope module hilo_block $end
$var wire 6 i func [5:0] $end
$var wire 32 j hi_in [31:0] $end
$var wire 6 k insop [5:0] $end
$var wire 32 l lo_in [31:0] $end
$var wire 32 m reg_read_a [31:0] $end
$var reg 32 n hi [31:0] $end
$var reg 32 o lo [31:0] $end
$upscope $end
$scope module link_block $end
$var wire 32 p instruction [31:0] $end
$var wire 5 q reg_write_addr_in [4:0] $end
$var reg 5 r reg_write_addr_out [4:0] $end
$upscope $end
$scope module load_block $end
$var wire 32 s instruction [31:0] $end
$var wire 32 t read_data [31:0] $end
$var reg 32 u out [31:0] $end
$var reg 32 v reg_data [31:0] $end
$upscope $end
$scope module lw_block $end
$var wire 32 w instruction [31:0] $end
$var wire 32 x mem_address [31:0] $end
$var wire 32 y read_data [31:0] $end
$var wire 32 z reg_d [31:0] $end
$var reg 32 { out [31:0] $end
$var reg 32 | reg_data [31:0] $end
$upscope $end
$scope module pc_block $end
$var wire 1 ( clk $end
$var wire 1 ) clk_enable $end
$var wire 32 } pc_in [31:0] $end
$var reg 32 ~ pc_out [31:0] $end
$upscope $end
$scope module pcupdate_block $end
$var wire 1 F branch $end
$var wire 1 D eq $end
$var wire 32 !" immediate [31:0] $end
$var wire 32 "" instruction [31:0] $end
$var wire 1 A jump $end
$var wire 1 > lt $end
$var wire 32 #" pc4 [31:0] $end
$var wire 1 , reset $end
$var wire 32 $" target [31:0] $end
$var wire 32 %" reg_read [31:0] $end
$var reg 32 &" out [31:0] $end
$var reg 32 '" pc_out [31:0] $end
$var reg 32 (" reg_out [31:0] $end
$var reg 32 )" shift [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 *" address_1 [4:0] $end
$var wire 5 +" address_2 [4:0] $end
$var wire 1 ( clk $end
$var wire 1 ) clk_enable $end
$var wire 1 , reset $end
$var wire 5 ," write_address [4:0] $end
$var wire 32 -" write_data [31:0] $end
$var wire 1 3 write_enable $end
$var reg 5 ." c [4:0] $end
$var reg 32 /" d [31:0] $end
$var reg 32 0" read_data1 [31:0] $end
$var reg 32 1" read_data2 [31:0] $end
$upscope $end
$scope module unsign_block $end
$var wire 32 2" instruction [31:0] $end
$var reg 1 1 unsign $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100100001000110000000000000101 2"
b0 1"
b0 0"
b0 /"
b0 ."
b101 -"
b11 ,"
b11 +"
b1 *"
bx )"
bx ("
b1000 '"
bx &"
b0 %"
b1000110000000000000101 $"
b1000 #"
b100100001000110000000000000101 ""
b101 !"
b100 ~
b1000 }
b101 |
b101 {
b0 z
b101 y
b101 x
b100100001000110000000000000101 w
b101 v
b101 u
b101 t
b100100001000110000000000000101 s
b11 r
b11 q
b100100001000110000000000000101 p
bx o
bx n
b0 m
bx l
b1001 k
bx j
b101 i
b101 h
b100100001000110000000000000101 g
b101 f
b1111 e
b11 d
b1001 c
b101 b
b11 a
b0 `
b11 _
b1001 ^
b101 ]
bx \
bx [
bx Z
b101 Y
b0 X
b0 W
b101 V
bx U
b101 T
b11 S
b101 R
b1001 Q
b101 P
b0 O
b101 N
b11 M
b1 L
b0 K
b0 J
b11 I
b101 H
1G
0F
b101 E
xD
bx C
b101 B
0A
bx @
bx ?
x>
0=
b1000 <
b1000 ;
b100 :
b0 9
b0 8
b11 7
b101 6
b101 5
04
13
b1000110000000000000101 2
11
b100100001000110000000000000101 0
b100100001000110000000000000101 /
b100 .
bx -
0,
b100100001000110000000000000101 +
bx *
1)
1(
x'
b101 &
0%
0$
b0 #
b100 "
bx !
$end
#4
0(
#8
b1011 6
b1011 |
b1011 -"
b1011 {
b1011 &
b1011 E
b1011 h
b1011 x
b1011 5
b1011 v
b1011 y
b1011 u
b1011 R
b1011 f
b1011 T
b1011 t
b1011 H
b1011 Y
b110 N
b110 V
b101 9
b101 W
b101 m
b101 %"
b101 0"
b110 B
b110 !"
b11000010000000000000110 2
b11000010000000000000110 $"
b1 7
b1 r
b1 ,"
b1 S
b1 q
b110 P
b110 ]
b110 b
b110 i
b1 M
b1 a
b1 +"
b11 L
b11 *"
b1100 ;
b1100 }
b1100 '"
b100100011000010000000000000110 0
b100100011000010000000000000110 g
b100100011000010000000000000110 p
b100100011000010000000000000110 s
b100100011000010000000000000110 w
b100100011000010000000000000110 ""
b100100011000010000000000000110 2"
b100100011000010000000000000110 +
b100100011000010000000000000110 /
b1100 <
b1100 #"
b1000 "
b1000 .
b1000 :
b1000 ~
b0 #
b0 O
b0 8
b0 z
b0 1"
1(
#12
0(
#16
b10000 6
b10000 |
b10000 -"
b10000 {
b10000 &
b10000 E
b10000 h
b10000 x
b10000 5
b10000 v
b10000 y
b10000 u
b1011 7
b1011 r
b1011 ,"
b10000 R
b10000 f
b10000 T
b10000 t
b1011 S
b1011 q
b10000 H
b10000 Y
14
0G
b0 I
b0 _
b0 d
b1011 N
b1011 V
b1000001000 e
b101100000100001 B
b101100000100001 !"
b11000010101100000100001 2
b11000010101100000100001 $"
b100001 P
b100001 ]
b100001 b
b100001 i
b0 Q
b0 ^
b0 c
b0 k
b1011 K
b10000 ;
b10000 }
b10000 '"
b11000010101100000100001 0
b11000010101100000100001 g
b11000010101100000100001 p
b11000010101100000100001 s
b11000010101100000100001 w
b11000010101100000100001 ""
b11000010101100000100001 2"
b11000010101100000100001 +
b11000010101100000100001 /
b10000 <
b10000 #"
b1100 "
b1100 .
b1100 :
b1100 ~
b1011 #
b1011 O
b1011 8
b1011 z
b1011 1"
1(
#20
0(
#24
b1 6
b1 |
b1 -"
b1 {
b1 &
b1 E
b1 h
b1 x
b1 5
b1 v
b1 y
b1 u
b1 R
b1 f
b1 T
b1 t
b1 H
b1 Y
b101 #
b101 O
b101 N
b101 V
b10 J
b10 X
b10 `
b101 8
b101 z
b101 1"
b1011 9
b1011 W
b1011 m
b1011 %"
b1011 0"
b1000000100100 B
b1000000100100 !"
b1000110001000000100100 2
b1000110001000000100100 $"
b10 7
b10 r
b10 ,"
b10 S
b10 q
b100100 P
b100100 ]
b100100 b
b100100 i
b10 K
b11 M
b11 a
b11 +"
b1 L
b1 *"
b10100 ;
b10100 }
b10100 '"
b1000110001000000100100 0
b1000110001000000100100 g
b1000110001000000100100 p
b1000110001000000100100 s
b1000110001000000100100 w
b1000110001000000100100 ""
b1000110001000000100100 2"
b1000110001000000100100 +
b1000110001000000100100 /
b10100 <
b10100 #"
b10000 "
b10000 .
b10000 :
b10000 ~
1(
#28
0(
#32
b1011 6
b1011 |
b1011 -"
b1011 {
b1011 &
b1011 E
b1011 h
b1011 x
b1011 5
b1011 v
b1011 y
b1011 u
b1011 R
b1011 f
b1011 T
b1011 t
b1011 H
b1011 Y
04
1G
b11 I
b11 _
b11 d
b1 #
b1 O
b11111 N
b11111 V
b10 J
b10 X
b10 `
b1111 e
b1 8
b1 z
b1 1"
b11111 B
b11111 !"
b1000100000000000011111 2
b1000100000000000011111 $"
b10 7
b10 r
b10 ,"
b10 S
b10 q
b11111 P
b11111 ]
b11111 b
b11111 i
b1100 Q
b1100 ^
b1100 c
b1100 k
b0 K
b10 M
b10 a
b10 +"
b11000 ;
b11000 }
b11000 '"
b110000001000100000000000011111 0
b110000001000100000000000011111 g
b110000001000100000000000011111 p
b110000001000100000000000011111 s
b110000001000100000000000011111 w
b110000001000100000000000011111 ""
b110000001000100000000000011111 2"
b110000001000100000000000011111 +
b110000001000100000000000011111 /
b11000 <
b11000 #"
b10100 "
b10100 .
b10100 :
b10100 ~
1(
#36
0(
#40
b0 6
b0 |
b0 -"
b0 {
b0 &
b0 E
b0 h
b0 x
b0 5
b0 v
b0 y
b0 u
b0 R
b0 f
b0 T
b0 t
1A
03
0G
b0 I
b0 _
b0 d
b0 H
b0 Y
b0 N
b0 V
b0 J
b0 X
b0 `
b100000000 e
b0 9
b0 W
b0 m
b0 %"
b0 0"
b100000 B
b100000 !"
b100000 2
b100000 $"
b0 7
b0 r
b0 ,"
b0 S
b0 q
b100000 P
b100000 ]
b100000 b
b100000 i
b10 Q
b10 ^
b10 c
b10 k
b0 M
b0 a
b0 +"
b0 L
b0 *"
b100000 ;
b100000 }
b100000 '"
b1000000000000000000000100000 0
b1000000000000000000000100000 g
b1000000000000000000000100000 p
b1000000000000000000000100000 s
b1000000000000000000000100000 w
b1000000000000000000000100000 ""
b1000000000000000000000100000 2"
b1000000000000000000000100000 +
b1000000000000000000000100000 /
b11100 <
b11100 #"
b11000 "
b11000 .
b11000 :
b11000 ~
b0 #
b0 O
b0 8
b0 z
b0 1"
1(
#44
0(
#48
b10010 6
b10010 |
b10010 -"
b10010 {
b10010 &
b10010 E
b10010 h
b10010 x
b10010 5
b10010 v
b10010 y
b10010 u
b100100 ;
b100100 }
b100100 '"
b10010 R
b10010 f
b10 N
b10 V
b10010 T
b10010 t
0A
13
1G
b11 I
b11 _
b11 d
b10010 H
b10010 Y
b0 J
b0 X
b0 `
b1111 e
b10000 9
b10000 W
b10000 m
b10000 %"
b10000 0"
b10 B
b10 !"
b1011001010000000000000010 2
b1011001010000000000000010 $"
b101 7
b101 r
b101 ,"
b101 S
b101 q
b10 P
b10 ]
b10 b
b10 i
b1001 Q
b1001 ^
b1001 c
b1001 k
b101 M
b101 a
b101 +"
b1011 L
b1011 *"
b100101011001010000000000000010 0
b100101011001010000000000000010 g
b100101011001010000000000000010 p
b100101011001010000000000000010 s
b100101011001010000000000000010 w
b100101011001010000000000000010 ""
b100101011001010000000000000010 2"
b100101011001010000000000000010 +
b100101011001010000000000000010 /
b100100 <
b100100 #"
b100000 "
b100000 .
b100000 :
b100000 ~
1(
#52
0(
#56
b1 6
b1 |
b1 -"
b1 {
b1 &
b1 E
b1 h
b1 x
b1 5
b1 v
b1 y
b1 u
b100 J
b100 X
b100 `
b1 R
b1 f
b1 T
b1 t
b10 I
b10 _
b10 d
b1 H
b1 Y
b1000 N
b1000 V
b1110 e
b101 9
b101 W
b101 m
b101 %"
b101 0"
b1000 B
b1000 !"
b11010000000000000001000 2
b11010000000000000001000 $"
b1000 7
b1000 r
b1000 ,"
b1000 S
b1000 q
b1000 P
b1000 ]
b1000 b
b1000 i
b1011 Q
b1011 ^
b1011 c
b1011 k
b1000 M
b1000 a
b1000 +"
b11 L
b11 *"
b101000 ;
b101000 }
b101000 '"
b101100011010000000000000001000 0
b101100011010000000000000001000 g
b101100011010000000000000001000 p
b101100011010000000000000001000 s
b101100011010000000000000001000 w
b101100011010000000000000001000 ""
b101100011010000000000000001000 2"
b101100011010000000000000001000 +
b101100011010000000000000001000 /
b101000 <
b101000 #"
b100100 "
b100100 .
b100100 :
b100100 ~
b0 #
b0 O
b0 8
b0 z
b0 1"
1(
#60
0(
#64
b11011 6
b11011 |
b11011 -"
b11011 {
b11011 &
b11011 E
b11011 h
b11011 x
b11011 5
b11011 v
b11011 y
b11011 u
b11011 R
b11011 f
b11011 T
b11011 t
b11011 H
b11011 Y
b11 J
b11 X
b11 `
14
0G
b0 I
b0 _
b0 d
b10010 N
b10010 V
b1000001000 e
b1011 9
b1011 W
b1011 m
b1011 %"
b1011 0"
b100100000100101 B
b100100000100101 !"
b1001010100100000100101 2
b1001010100100000100101 $"
b1001 7
b1001 r
b1001 ,"
b1001 S
b1001 q
b100101 P
b100101 ]
b100101 b
b100101 i
b0 Q
b0 ^
b0 c
b0 k
b1001 K
b101 M
b101 a
b101 +"
b1 L
b1 *"
b101100 ;
b101100 }
b101100 '"
b1001010100100000100101 0
b1001010100100000100101 g
b1001010100100000100101 p
b1001010100100000100101 s
b1001010100100000100101 w
b1001010100100000100101 ""
b1001010100100000100101 2"
b1001010100100000100101 +
b1001010100100000100101 /
b101100 <
b101100 #"
b101000 "
b101000 .
b101000 :
b101000 ~
b10010 #
b10010 O
b10010 8
b10010 z
b10010 1"
1(
#68
0(
#72
b1111 6
b1111 |
b1111 -"
b1111 {
b1111 &
b1111 E
b1111 h
b1111 x
b1111 5
b1111 v
b1111 y
b1111 u
b1111 R
b1111 f
b1111 T
b1111 t
b1111 H
b1111 Y
04
1G
b11 I
b11 _
b11 d
b11011 #
b11011 O
b1111 N
b1111 V
b11 J
b11 X
b11 `
b1111 e
b11011 8
b11011 z
b11011 1"
b1111 B
b1111 !"
b10010010000000000001111 2
b10010010000000000001111 $"
b1001 7
b1001 r
b1001 ,"
b1001 S
b1001 q
b1111 P
b1111 ]
b1111 b
b1111 i
b1101 Q
b1101 ^
b1101 c
b1101 k
b0 K
b1001 M
b1001 a
b1001 +"
b10 L
b10 *"
b110000 ;
b110000 }
b110000 '"
b110100010010010000000000001111 0
b110100010010010000000000001111 g
b110100010010010000000000001111 p
b110100010010010000000000001111 s
b110100010010010000000000001111 w
b110100010010010000000000001111 ""
b110100010010010000000000001111 2"
b110100010010010000000000001111 +
b110100010010010000000000001111 /
b110000 <
b110000 #"
b101100 "
b101100 .
b101100 :
b101100 ~
1(
#76
0(
#80
b11001 6
b11001 |
b11001 -"
b11001 {
b11001 &
b11001 E
b11001 h
b11001 x
b11001 5
b11001 v
b11001 y
b11001 u
b11001 R
b11001 f
b11001 T
b11001 t
b11001 H
b11001 Y
14
0G
b0 I
b0 _
b0 d
b10010 N
b10010 V
b1000 J
b1000 X
b1000 `
b1000001000 e
b101000000100110 B
b101000000100110 !"
b1001010101000000100110 2
b1001010101000000100110 $"
b1010 7
b1010 r
b1010 ,"
b1010 S
b1010 q
b100110 P
b100110 ]
b100110 b
b100110 i
b0 Q
b0 ^
b0 c
b0 k
b1010 K
b101 M
b101 a
b101 +"
b1 L
b1 *"
b110100 ;
b110100 }
b110100 '"
b1001010101000000100110 0
b1001010101000000100110 g
b1001010101000000100110 p
b1001010101000000100110 s
b1001010101000000100110 w
b1001010101000000100110 ""
b1001010101000000100110 2"
b1001010101000000100110 +
b1001010101000000100110 /
b110100 <
b110100 #"
b110000 "
b110000 .
b110000 :
b110000 ~
b10010 #
b10010 O
b10010 8
b10010 z
b10010 1"
1(
#84
0(
#88
b110010 6
b110010 |
b110010 -"
b110010 {
b110010 &
b110010 E
b110010 h
b110010 x
b110010 5
b110010 v
b110010 y
b110010 u
b110010 R
b110010 f
b110010 T
b110010 t
b110010 H
b110010 Y
b11001 #
b11001 O
b11001 N
b11001 V
b0 J
b0 X
b0 `
b11001 8
b11001 z
b11001 1"
b11001 9
b11001 W
b11001 m
b11001 %"
b11001 0"
b1001 B
b1001 !"
b1010010100000000000001001 2
b1010010100000000000001001 $"
b0 7
b0 r
b0 ,"
b0 S
b0 q
b1001 P
b1001 ]
b1001 b
b1001 i
b1110 Q
b1110 ^
b1110 c
b1110 k
b0 K
b1010 M
b1010 a
b1010 +"
b1010 L
b1010 *"
b111000 ;
b111000 }
b111000 '"
b111001010010100000000000001001 0
b111001010010100000000000001001 g
b111001010010100000000000001001 p
b111001010010100000000000001001 s
b111001010010100000000000001001 w
b111001010010100000000000001001 ""
b111001010010100000000000001001 2"
b111001010010100000000000001001 +
b111001010010100000000000001001 /
b111000 <
b111000 #"
b110100 "
b110100 .
b110100 :
b110100 ~
1(
#92
0(
#96
b1010 6
b1010 |
b1010 -"
b1010 {
b1010 &
b1010 E
b1010 h
b1010 x
b1010 5
b1010 v
b1010 y
b1010 u
b1010 R
b1010 f
b1010 T
b1010 t
0>
b1010 H
b1010 Y
b1111 #
b1111 O
b1111 N
b1111 V
b1 J
b1 X
b1 `
b1111 8
b1111 z
b1111 1"
b1000000100011 B
b1000000100011 !"
b1010010010001000000100011 2
b1010010010001000000100011 $"
b10 7
b10 r
b10 ,"
b10 S
b10 q
b100011 P
b100011 ]
b100011 b
b100011 i
b0 Q
b0 ^
b0 c
b0 k
b10 K
b1001 M
b1001 a
b1001 +"
b111100 ;
b111100 }
b111100 '"
b1010010010001000000100011 0
b1010010010001000000100011 g
b1010010010001000000100011 p
b1010010010001000000100011 s
b1010010010001000000100011 w
b1010010010001000000100011 ""
b1010010010001000000100011 2"
b1010010010001000000100011 +
b1010010010001000000100011 /
b111100 <
b111100 #"
b111000 "
b111000 .
b111000 :
b111000 ~
1(
#100
0(
#104
b1010010 6
b1010010 |
b1010010 -"
b1010010 {
b1010010 &
b1010010 E
b1010010 h
b1010010 x
b1010010 5
b1010010 v
b1010010 y
b1010010 u
b1010010 R
b1010010 f
b1010010 T
b1010010 t
04
1G
b11 I
b11 _
b11 d
b1010010 H
b1010010 Y
b0 #
b0 O
b100000 N
b100000 V
b0 J
b0 X
b0 `
b1111 e
b0 8
b0 z
b0 1"
b110010 9
b110010 W
b110010 m
b110010 %"
b110010 0"
b100000 B
b100000 !"
b1110000000000100000 2
b1110000000000100000 $"
b111 7
b111 r
b111 ,"
b111 S
b111 q
b100000 P
b100000 ]
b100000 b
b100000 i
b1001 Q
b1001 ^
b1001 c
b1001 k
b0 K
b111 M
b111 a
b111 +"
b0 L
b0 *"
b1000000 ;
b1000000 }
b1000000 '"
b100100000001110000000000100000 0
b100100000001110000000000100000 g
b100100000001110000000000100000 p
b100100000001110000000000100000 s
b100100000001110000000000100000 w
b100100000001110000000000100000 ""
b100100000001110000000000100000 2"
b100100000001110000000000100000 +
b100100000001110000000000100000 /
b1000000 <
b1000000 #"
b111100 "
b111100 .
b111100 :
b111100 ~
1(
#108
0(
#112
b110010 6
b110010 |
b110010 -"
b110010 {
b110010 &
b110010 E
b110010 h
b110010 x
b110010 5
b110010 v
b110010 y
b110010 u
b110010 R
b110010 f
b110010 T
b110010 t
1A
03
0G
b0 I
b0 _
b0 d
b110010 H
b110010 Y
b110010 #
b110010 O
b110010 N
b110010 V
b100000000 e
b110010 8
b110010 z
b110010 1"
b0 9
b0 W
b0 m
b0 %"
b0 0"
b1000 B
b1000 !"
b111000000000000000001000 2
b111000000000000000001000 $"
b0 7
b0 r
b0 ,"
b0 S
b0 q
b1000 P
b1000 ]
b1000 b
b1000 i
b0 Q
b0 ^
b0 c
b0 k
b0 M
b0 a
b0 +"
b111 L
b111 *"
b0 ;
b0 }
b0 '"
b111000000000000000001000 0
b111000000000000000001000 g
b111000000000000000001000 p
b111000000000000000001000 s
b111000000000000000001000 w
b111000000000000000001000 ""
b111000000000000000001000 2"
b111000000000000000001000 +
b111000000000000000001000 /
b1000100 <
b1000100 #"
b1000000 "
b1000000 .
b1000000 :
b1000000 ~
1(
#116
0(
#120
b100 <
b100 #"
b0 "
b0 .
b0 :
b0 ~
1(
#124
0(
#128
1(
#132
0(
#136
1(
#140
0(
#144
1(
#148
0(
#152
1(
#156
0(
#160
1(
#164
0(
#168
1(
#172
0(
#176
1(
#180
0(
#184
1(
#188
0(
#192
1(
#196
0(
#200
1(
#204
0(
#208
1(
#212
0(
#216
1(
#220
0(
#224
1(
#228
0(
#232
1(
#236
0(
#240
1(
