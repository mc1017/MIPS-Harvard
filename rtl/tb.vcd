$date
	Tue Dec 14 21:17:49 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! register_v0 [31:0] $end
$var wire 32 " instr_address [31:0] $end
$var wire 32 # data_writedata [31:0] $end
$var wire 1 $ data_write $end
$var wire 32 % data_readdata [31:0] $end
$var wire 1 & data_read $end
$var wire 32 ' data_address [31:0] $end
$var wire 1 ( active $end
$var reg 1 ) clk $end
$var reg 1 * clk_enable $end
$var reg 32 + instr_readdata [31:0] $end
$var reg 1 , reset $end
$scope module dm $end
$var wire 1 ) clk $end
$var wire 1 * clock_enable $end
$var wire 1 , reset $end
$var wire 32 - write_data [31:0] $end
$var wire 1 $ write $end
$var wire 1 & read $end
$var wire 32 . address [31:0] $end
$var reg 32 / c [31:0] $end
$var reg 32 0 read_data [31:0] $end
$upscope $end
$scope module dut $end
$var wire 1 ) clk $end
$var wire 1 * clk_enable $end
$var wire 32 1 data_readdata [31:0] $end
$var wire 32 2 instr_address [31:0] $end
$var wire 32 3 instr_readdata [31:0] $end
$var wire 32 4 instruction [31:0] $end
$var wire 1 , reset $end
$var wire 32 5 sb_mem_in [31:0] $end
$var wire 32 6 sb_reg_in [31:0] $end
$var wire 1 7 unsign $end
$var wire 32 8 target [31:0] $end
$var wire 32 9 sb_out [31:0] $end
$var wire 32 : sa [31:0] $end
$var wire 1 ; regwrite $end
$var wire 1 < regdst $end
$var wire 32 = reg_write_data_3 [31:0] $end
$var wire 32 > reg_write_data_2 [31:0] $end
$var wire 32 ? reg_write_data [31:0] $end
$var wire 5 @ reg_write_addr [4:0] $end
$var wire 32 A reg_read_b [31:0] $end
$var wire 32 B reg_read_a [31:0] $end
$var wire 32 C r2 [31:0] $end
$var wire 32 D pc_out [31:0] $end
$var wire 32 E pc4 [31:0] $end
$var wire 1 F memtoreg $end
$var wire 1 G lt $end
$var wire 32 H lo [31:0] $end
$var wire 32 I link_data [31:0] $end
$var wire 1 J jump $end
$var wire 32 K imm [31:0] $end
$var wire 32 L hi [31:0] $end
$var wire 1 M eq $end
$var wire 1 $ data_write $end
$var wire 1 & data_read $end
$var wire 32 N data_address [31:0] $end
$var wire 1 O branch $end
$var wire 1 P alusrc $end
$var wire 32 Q aluout [31:0] $end
$var wire 2 R alucwire [1:0] $end
$var wire 4 S alucon [3:0] $end
$var wire 32 T alub1 [31:0] $end
$var wire 32 U alua_in [31:0] $end
$var reg 1 ( active $end
$var reg 5 V addrd [4:0] $end
$var reg 5 W addrs [4:0] $end
$var reg 5 X addrt [4:0] $end
$var reg 32 Y alub_in [31:0] $end
$var reg 32 Z data_writedata [31:0] $end
$var reg 6 [ func [5:0] $end
$var reg 6 \ insop [5:0] $end
$var reg 32 ] mem_addr_hold [31:0] $end
$var reg 5 ^ reg_write_addr_hold [4:0] $end
$var reg 32 _ reg_write_data_1 [31:0] $end
$var reg 32 ` register_v0 [31:0] $end
$scope module alu_block $end
$var wire 32 a alub [31:0] $end
$var wire 1 7 unsign $end
$var wire 32 b reg_read_a [31:0] $end
$var wire 4 c ALUcon [3:0] $end
$var reg 32 d ALUoutput [31:0] $end
$var reg 1 M eq $end
$var reg 32 e hi [31:0] $end
$var reg 32 f lo [31:0] $end
$var reg 1 G lt $end
$var reg 64 g multiplier [63:0] $end
$upscope $end
$scope module alucontrol_block $end
$var wire 6 h func [5:0] $end
$var wire 6 i op [5:0] $end
$var wire 2 j ALUop [1:0] $end
$var reg 4 k ALUcon [3:0] $end
$upscope $end
$scope module branch_data_block $end
$var wire 32 l imm [31:0] $end
$var wire 6 m insop [5:0] $end
$var reg 32 n alub [31:0] $end
$upscope $end
$scope module control_block $end
$var wire 5 o branchfield [4:0] $end
$var wire 6 p func [5:0] $end
$var wire 6 q insop [5:0] $end
$var wire 1 ; regwrite $end
$var wire 1 < regdst $end
$var wire 1 $ memwrite $end
$var wire 1 F memtoreg $end
$var wire 1 & memread $end
$var wire 1 J jump $end
$var wire 1 O branch $end
$var wire 1 P ALUsrc $end
$var wire 2 r ALUop [1:0] $end
$var reg 10 s controlsig [9:0] $end
$upscope $end
$scope module dac_block $end
$var wire 32 t address [31:0] $end
$var wire 32 u instruction [31:0] $end
$var reg 32 v address_out [31:0] $end
$upscope $end
$scope module hilo_block $end
$var wire 6 w func [5:0] $end
$var wire 32 x hi_in [31:0] $end
$var wire 6 y insop [5:0] $end
$var wire 32 z lo_in [31:0] $end
$var wire 32 { reg_read_a [31:0] $end
$var reg 32 | hi [31:0] $end
$var reg 32 } lo [31:0] $end
$upscope $end
$scope module link_block $end
$var wire 32 ~ instruction [31:0] $end
$var wire 5 !" reg_write_addr_in [4:0] $end
$var wire 32 "" old_reg_data [31:0] $end
$var wire 32 #" new_reg_data [31:0] $end
$var reg 32 $" new_reg_write_data [31:0] $end
$var reg 5 %" reg_write_addr_out [4:0] $end
$upscope $end
$scope module load_block $end
$var wire 32 &" instruction [31:0] $end
$var wire 32 '" read_data [31:0] $end
$var reg 32 (" out [31:0] $end
$var reg 32 )" reg_data [31:0] $end
$upscope $end
$scope module lw_block $end
$var wire 32 *" instruction [31:0] $end
$var wire 32 +" mem_address [31:0] $end
$var wire 32 ," read_data [31:0] $end
$var wire 32 -" reg_d [31:0] $end
$var reg 32 ." out [31:0] $end
$var reg 32 /" reg_data [31:0] $end
$upscope $end
$scope module pcupdate_block $end
$var wire 1 O branch $end
$var wire 1 ) clk $end
$var wire 1 * clk_enable $end
$var wire 1 M eq $end
$var wire 32 0" immediate [31:0] $end
$var wire 32 1" instruction [31:0] $end
$var wire 1 J jump $end
$var wire 1 G lt $end
$var wire 32 2" pc4 [31:0] $end
$var wire 1 , reset $end
$var wire 32 3" target [31:0] $end
$var wire 32 4" reg_read [31:0] $end
$var reg 1 5" branch_d $end
$var reg 1 6" fail $end
$var reg 1 7" jump_d $end
$var reg 32 8" out [31:0] $end
$var reg 32 9" pc_out [31:0] $end
$var reg 32 :" pc_out_d [31:0] $end
$var reg 32 ;" pc_target [31:0] $end
$var reg 32 <" reg_out [31:0] $end
$var reg 32 =" shift [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 >" address_1 [4:0] $end
$var wire 5 ?" address_2 [4:0] $end
$var wire 1 ) clk $end
$var wire 1 * clk_enable $end
$var wire 1 , reset $end
$var wire 5 @" write_address [4:0] $end
$var wire 32 A" write_data [31:0] $end
$var wire 1 ; write_enable $end
$var reg 5 B" c [4:0] $end
$var reg 32 C" read_data1 [31:0] $end
$var reg 32 D" read_data2 [31:0] $end
$var reg 32 E" register_v0 [31:0] $end
$upscope $end
$scope module sb_block $end
$var wire 6 F" insop [5:0] $end
$var wire 32 G" mem_data [31:0] $end
$var wire 32 H" reg_data [31:0] $end
$var reg 32 I" out [31:0] $end
$upscope $end
$scope module shift_control_block $end
$var wire 32 J" instruction [31:0] $end
$var wire 32 K" org_data [31:0] $end
$var wire 32 L" sa [31:0] $end
$var reg 32 M" alu_in [31:0] $end
$upscope $end
$scope module unsign_block $end
$var wire 32 N" instruction [31:0] $end
$var reg 1 7 unsign $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10011000000000100000000000000000 N"
b0 M"
b0 L"
b0 K"
b10011000000000100000000000000000 J"
bx I"
b0 H"
b11111111111111111111111111111111 G"
b100110 F"
b0 E"
b0 D"
b0 C"
b0 B"
b11111111 A"
b10 @"
b10 ?"
b0 >"
bx ="
bx <"
bx ;"
b10111111110000000000000000000000 :"
b10111111110000000000000000000000 9"
bx 8"
x7"
x6"
x5"
b0 4"
b10110000000010000000000000000000 3"
b10111111110000000000000000000100 2"
b10011000000000100000000000000000 1"
b0 0"
b11111111 /"
b11111111 ."
b0 -"
b11111111111111111111111111111111 ,"
b0 +"
b10011000000000100000000000000000 *"
b11111111111111111111111111111111 )"
b11111111111111111111111111111111 ("
b11111111111111111111111111111111 '"
b10011000000000100000000000000000 &"
b10 %"
b11111111 $"
bx #"
b11111111 ""
b10 !"
b10011000000000100000000000000000 ~
bx }
bx |
b0 {
b0 z
b100110 y
b0 x
b0 w
b0 v
b10011000000000100000000000000000 u
b0 t
b1011111 s
b11 r
b100110 q
b0 p
b10 o
b0 n
b100110 m
b0 l
b0 k
b11 j
b100110 i
b0 h
bx g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
bx `
b11111111111111111111111111111111 _
b10 ^
b0 ]
b100110 \
b0 [
b0 Z
b0 Y
b10 X
b0 W
b0 V
b0 U
b0 T
b0 S
b11 R
b0 Q
1P
0O
b0 N
0M
b0 L
b0 K
0J
bx I
b0 H
0G
1F
b10111111110000000000000000000100 E
b10111111110000000000000000000000 D
b0 C
b0 B
b0 A
b10 @
b11111111 ?
b11111111111111111111111111111111 >
b11111111 =
0<
1;
b0 :
bx 9
b10110000000010000000000000000000 8
17
b0 6
b11111111111111111111111111111111 5
b10011000000000100000000000000000 4
b10011000000000100000000000000000 3
b10111111110000000000000000000000 2
b11111111111111111111111111111111 1
b11111111111111111111111111111111 0
b1000000000000 /
b0 .
b0 -
0,
b10011000000000100000000000000000 +
1*
1)
0(
b0 '
1&
b11111111111111111111111111111111 %
0$
b0 #
b10111111110000000000000000000000 "
bx !
$end
#4
0)
#8
b0 >
b0 )"
b0 ,"
b0 ("
b0 _
b0 '"
b1000 T
b1000 n
1J
0&
0F
0;
0P
b0 R
b0 j
b0 r
b1000 K
b1000 l
b1000 0"
b100000000 s
b10110000000000000000000000100000 8
b10110000000000000000000000100000 3"
b0 ?
b0 $"
b0 A"
b0 @
b0 %"
b0 @"
b0 =
b0 ""
b0 /"
b0 ."
b0 ^
b0 !"
b1000 [
b1000 h
b1000 p
b1000 w
b0 \
b0 i
b0 m
b0 q
b0 y
b0 F"
b0 X
b0 o
b0 ?"
b1000 4
b1000 u
b1000 ~
b1000 &"
b1000 *"
b1000 1"
b1000 J"
b1000 N"
b1000 +
b1000 3
b10111111110000000000000000001000 E
b10111111110000000000000000001000 2"
b10111111110000000000000000000100 "
b10111111110000000000000000000100 2
b10111111110000000000000000000100 D
b10111111110000000000000000000100 :"
07"
05"
b0 #
b0 -
b0 Z
b11111111 C
b11111111 E"
b0 6
b0 H"
b0 A
b0 -"
b0 D"
b0 9"
1)
#12
0)
#16
b0 T
b0 n
0J
1;
1P
b11 R
b11 j
b11 r
b0 K
b0 l
b0 0"
b0 S
b0 c
b0 k
b1111 s
b10110000000000000000000000000000 8
b10110000000000000000000000000000 3"
b0 [
b0 h
b0 p
b0 w
b1001 \
b1001 i
b1001 m
b1001 q
b1001 y
b1001 F"
b100100000000000000000000000000 4
b100100000000000000000000000000 u
b100100000000000000000000000000 ~
b100100000000000000000000000000 &"
b100100000000000000000000000000 *"
b100100000000000000000000000000 1"
b100100000000000000000000000000 J"
b100100000000000000000000000000 N"
b100100000000000000000000000000 +
b100100000000000000000000000000 3
b0 ;"
b10111111110000000000000000001100 E
b10111111110000000000000000001100 2"
b10111111110000000000000000001000 "
b10111111110000000000000000001000 2
b10111111110000000000000000001000 D
b10111111110000000000000000001000 :"
17"
06"
1)
#20
0)
#24
b0 8
b0 3"
b11111111 !
b11111111 `
b100 E
b100 2"
b0 "
b0 2
b0 D
b0 :"
07"
b10111111110000000000000000001100 9"
1)
#28
0)
#32
b1000 E
b1000 2"
b100 "
b100 2
b100 D
b100 :"
b100 9"
1)
#36
0)
#40
b1100 E
b1100 2"
b1000 "
b1000 2
b1000 D
b1000 :"
b1000 9"
1)
#44
0)
#48
b10000 E
b10000 2"
b1100 "
b1100 2
b1100 D
b1100 :"
b1100 9"
1)
#52
0)
#56
b10100 E
b10100 2"
b10000 "
b10000 2
b10000 D
b10000 :"
b10000 9"
1)
#60
0)
#64
b11000 E
b11000 2"
b10100 "
b10100 2
b10100 D
b10100 :"
b10100 9"
1)
#68
0)
#72
b11100 E
b11100 2"
b11000 "
b11000 2
b11000 D
b11000 :"
b11000 9"
1)
#76
0)
#80
b100000 E
b100000 2"
b11100 "
b11100 2
b11100 D
b11100 :"
b11100 9"
1)
#84
0)
#88
b100100 E
b100100 2"
b100000 "
b100000 2
b100000 D
b100000 :"
b100000 9"
1)
#92
0)
#96
b101000 E
b101000 2"
b100100 "
b100100 2
b100100 D
b100100 :"
b100100 9"
1)
#100
0)
#104
b101100 E
b101100 2"
b101000 "
b101000 2
b101000 D
b101000 :"
b101000 9"
1)
#108
0)
#112
b110000 E
b110000 2"
b101100 "
b101100 2
b101100 D
b101100 :"
b101100 9"
1)
#116
0)
#120
b110100 E
b110100 2"
b110000 "
b110000 2
b110000 D
b110000 :"
b110000 9"
1)
#124
0)
#128
b111000 E
b111000 2"
b110100 "
b110100 2
b110100 D
b110100 :"
b110100 9"
1)
#132
0)
#136
b111100 E
b111100 2"
b111000 "
b111000 2
b111000 D
b111000 :"
b111000 9"
1)
#140
0)
#144
b1000000 E
b1000000 2"
b111100 "
b111100 2
b111100 D
b111100 :"
b111100 9"
1)
#148
0)
#152
b1000100 E
b1000100 2"
b1000000 "
b1000000 2
b1000000 D
b1000000 :"
b1000000 9"
1)
#156
0)
#160
b1001000 E
b1001000 2"
b1000100 "
b1000100 2
b1000100 D
b1000100 :"
b1000100 9"
1)
#164
0)
#168
b1001100 E
b1001100 2"
b1001000 "
b1001000 2
b1001000 D
b1001000 :"
b1001000 9"
1)
#172
0)
#176
b1010000 E
b1010000 2"
b1001100 "
b1001100 2
b1001100 D
b1001100 :"
b1001100 9"
1)
#180
0)
#184
b1010100 E
b1010100 2"
b1010000 "
b1010000 2
b1010000 D
b1010000 :"
b1010000 9"
1)
#188
0)
#192
b1011000 E
b1011000 2"
b1010100 "
b1010100 2
b1010100 D
b1010100 :"
b1010100 9"
1)
#196
0)
#200
b1011100 E
b1011100 2"
b1011000 "
b1011000 2
b1011000 D
b1011000 :"
b1011000 9"
1)
#204
0)
#208
b1100000 E
b1100000 2"
b1011100 "
b1011100 2
b1011100 D
b1011100 :"
b1011100 9"
1)
#212
0)
#216
b1100100 E
b1100100 2"
b1100000 "
b1100000 2
b1100000 D
b1100000 :"
b1100000 9"
1)
#220
0)
#224
b1101000 E
b1101000 2"
b1100100 "
b1100100 2
b1100100 D
b1100100 :"
b1100100 9"
1)
#228
0)
#232
b1101100 E
b1101100 2"
b1101000 "
b1101000 2
b1101000 D
b1101000 :"
b1101000 9"
1)
#236
0)
#240
b1110000 E
b1110000 2"
b1101100 "
b1101100 2
b1101100 D
b1101100 :"
b1101100 9"
1)
#244
0)
#248
b1110100 E
b1110100 2"
b1110000 "
b1110000 2
b1110000 D
b1110000 :"
b1110000 9"
1)
#252
0)
#256
b1111000 E
b1111000 2"
b1110100 "
b1110100 2
b1110100 D
b1110100 :"
b1110100 9"
1)
#260
0)
#264
b1111100 E
b1111100 2"
b1111000 "
b1111000 2
b1111000 D
b1111000 :"
b1111000 9"
1)
#268
0)
#272
b10000000 E
b10000000 2"
b1111100 "
b1111100 2
b1111100 D
b1111100 :"
b1111100 9"
1)
#276
0)
#280
b10000100 E
b10000100 2"
b10000000 "
b10000000 2
b10000000 D
b10000000 :"
b10000000 9"
1)
#284
0)
#288
b10001000 E
b10001000 2"
b10000100 "
b10000100 2
b10000100 D
b10000100 :"
b10000100 9"
1)
#292
0)
#296
b10001100 E
b10001100 2"
b10001000 "
b10001000 2
b10001000 D
b10001000 :"
b10001000 9"
1)
#300
0)
#304
b10010000 E
b10010000 2"
b10001100 "
b10001100 2
b10001100 D
b10001100 :"
b10001100 9"
1)
#308
0)
#312
b10010100 E
b10010100 2"
b10010000 "
b10010000 2
b10010000 D
b10010000 :"
b10010000 9"
1)
#316
0)
#320
b10011000 E
b10011000 2"
b10010100 "
b10010100 2
b10010100 D
b10010100 :"
b10010100 9"
1)
#324
0)
#328
b10011100 E
b10011100 2"
b10011000 "
b10011000 2
b10011000 D
b10011000 :"
b10011000 9"
1)
#332
0)
#336
b10100000 E
b10100000 2"
b10011100 "
b10011100 2
b10011100 D
b10011100 :"
b10011100 9"
1)
#340
0)
#344
b10100100 E
b10100100 2"
b10100000 "
b10100000 2
b10100000 D
b10100000 :"
b10100000 9"
1)
#348
0)
#352
b10101000 E
b10101000 2"
b10100100 "
b10100100 2
b10100100 D
b10100100 :"
b10100100 9"
1)
#356
0)
#360
b10101100 E
b10101100 2"
b10101000 "
b10101000 2
b10101000 D
b10101000 :"
b10101000 9"
1)
#364
0)
#368
b10110000 E
b10110000 2"
b10101100 "
b10101100 2
b10101100 D
b10101100 :"
b10101100 9"
1)
#372
0)
#376
b10110100 E
b10110100 2"
b10110000 "
b10110000 2
b10110000 D
b10110000 :"
b10110000 9"
1)
#380
0)
#384
b10111000 E
b10111000 2"
b10110100 "
b10110100 2
b10110100 D
b10110100 :"
b10110100 9"
1)
#388
0)
#392
b10111100 E
b10111100 2"
b10111000 "
b10111000 2
b10111000 D
b10111000 :"
b10111000 9"
1)
#396
0)
#400
b11000000 E
b11000000 2"
b10111100 "
b10111100 2
b10111100 D
b10111100 :"
b10111100 9"
1)
#404
