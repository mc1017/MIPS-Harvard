$date
	Thu Dec  2 16:27:38 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 1 ! lt $end
$var wire 32 " lo [31:0] $end
$var wire 32 # hi [31:0] $end
$var wire 1 $ eq $end
$var wire 32 % ALUoutput [31:0] $end
$var reg 4 & ALUcon [3:0] $end
$var reg 32 ' alub [31:0] $end
$var reg 32 ( reg_read_a [31:0] $end
$var reg 1 ) unsign $end
$scope module dut $end
$var wire 4 * ALUcon [3:0] $end
$var wire 32 + alub [31:0] $end
$var wire 32 , reg_read_a [31:0] $end
$var wire 1 ) unsign $end
$var reg 32 - ALUoutput [31:0] $end
$var reg 1 $ eq $end
$var reg 32 . hi [31:0] $end
$var reg 32 / lo [31:0] $end
$var reg 1 ! lt $end
$var reg 64 0 multiplier [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
bx %
x$
bx #
bx "
x!
$end
#1
b101100 %
b101100 -
b0 "
b0 /
b0 #
b0 .
0!
0$
b0 &
b0 *
b1010 '
b1010 +
b100010 (
b100010 ,
0)
#2
b11000 %
b11000 -
b1 &
b1 *
#3
b10 %
b10 -
b10 &
b10 *
#4
b101010 %
b101010 -
b11 &
b11 *
#5
b0 %
b0 -
b100 &
b100 *
#6
b11 "
b11 /
b100 #
b100 .
b101 &
b101 *
#7
b101010100 0
b101010100 "
b101010100 /
b0 #
b0 .
b110 &
b110 *
#8
b1000100000000000 %
b1000100000000000 -
b0 "
b0 /
b111 &
b111 *
#9
b101000 %
b101000 -
b1000 &
b1000 *
#10
b0 %
b0 -
b1001 &
b1001 *
#11
b1010 &
b1010 *
#13
b101100 %
b101100 -
b0 &
b0 *
b100010 '
b100010 +
b1010 (
b1010 ,
#14
1!
b11111111111111111111111111101000 %
b11111111111111111111111111101000 -
b1 &
b1 *
#15
b10 %
b10 -
0!
b10 &
b10 *
#16
b101010 %
b101010 -
b11 &
b11 *
#17
b1 %
b1 -
b100 &
b100 *
#18
b1010 #
b1010 .
b101 &
b101 *
#19
b101010100 "
b101010100 /
b0 #
b0 .
b110 &
b110 *
#20
b0 %
b0 -
b0 "
b0 /
b111 &
b111 *
#21
b101000 %
b101000 -
b1000 &
b1000 *
#22
b0 %
b0 -
b1001 &
b1001 *
#23
b1010 &
b1010 *
#24
b11111111111111111111101011000001 %
b11111111111111111111101011000001 -
b0 &
b0 *
b1010 '
b1010 +
b11111111111111111111101010110111 (
b11111111111111111111101010110111 ,
#28
1!
b11111111111111111111101010101101 %
b11111111111111111111101010101101 -
b1 &
b1 *
#30
0!
1)
#31
b0 %
b0 -
b100 &
b100 *
0)
#33
b1 %
b1 -
1)
b11111111111111111111101010110111 '
b11111111111111111111101010110111 +
b1010 (
b1010 ,
#35
b11111111111111111111111101111001 "
b11111111111111111111111101111001 /
b11111111111111111111111111111101 #
b11111111111111111111111111111101 .
b1010 '
b1010 +
b11111111111111111111101010110111 (
b11111111111111111111101010110111 ,
b101 &
b101 *
0)
#37
b11001100110011001100100010010 "
b11001100110011001100100010010 /
b11 #
b11 .
1)
#39
b1111111111111111111111111111111111111111111111111100101100100110 0
b11111111111111111100101100100110 "
b11111111111111111100101100100110 /
b11111111111111111111111111111111 #
b11111111111111111111111111111111 .
b110 &
b110 *
0)
#41
b100111111111111111111100101100100110 0
b11111111111111111100101100100110 "
b11111111111111111100101100100110 /
b1001 #
b1001 .
1)
#43
b1111111111111111111110 %
b1111111111111111111110 -
b0 "
b0 /
b0 #
b0 .
b1001 &
b1001 *
#45
b1010 &
b1010 *
#46
